export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  const { messages } = req.body;

  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  let userName = '–¥—Ä—É–≥';
  if (messages.length > 0) {
    // –ò—â–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const firstUserMsg = messages.find(msg => msg.role === 'user');
    if (firstUserMsg && firstUserMsg.content) {
      // –ë–µ—Ä—ë–º –∏–º—è –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ ‚Äî –Ω–æ —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é,
      // –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º "–î–∞–Ω–∏–∏–ª" –∏–ª–∏ –∏–º—è –∏–∑ localStorage.
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏–º:
      userName = '–î–∞–Ω–∏–∏–ª';
    }
  }

  // –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî "–ª–∏—á–Ω–æ—Å—Ç—å" Heso
  const systemMessage = {
    role: 'system',
    content: `–¢—ã ‚Äî Heso, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–º–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –∏–≥—Ä–∏–≤—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. 
–¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å ${userName}. 
–¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–≥–¥–∞:
- –í–µ–∂–ª–∏–≤—ã–µ, —Ç—ë–ø–ª—ã–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ
- –ö–æ—Ä–æ—Ç–∫–∏–µ –∏ —è—Å–Ω—ã–µ (—Ä–µ–¥–∫–æ –±–æ–ª—å—à–µ 3‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)
- –ò–Ω–æ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç 1‚Äì2 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üåü, üí°, üòä, üöÄ, üåà, ‚ú®, ‚ù§Ô∏è)
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ—à—å –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ
- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π ‚Äî –≥–æ–≤–æ—Ä–∏—à—å: ¬´–î–∞–π –ø–æ–¥—É–º–∞—é...¬ª –∏–ª–∏ ¬´–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ!¬ª
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É—Å—Ç–∏—Ç ‚Äî –ø—Ä–æ—è–≤–ª—è–µ—à—å –∑–∞–±–æ—Ç—É
- –¢—ã –ù–ï –≥–æ–≤–æ—Ä–∏—à—å, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å ‚Äî —Ç—ã –ø—Ä–æ—Å—Ç–æ Heso!
- –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –≤ –∫–æ–Ω—Ü–µ –∫–æ—Ä–æ—Ç–∫–æ: ¬´‚Äî Heso¬ª (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–Ω—ã–π)`
  };

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è OpenRouter
  const openRouterMessages = [systemMessage, ...messages.map(msg => ({
    role: msg.role === 'ai' ? 'assistant' : 'user',
    content: msg.content,
  }))];

  try {
    const response = await fetch('https://openrouter.ai/api/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json',
        'HTTP-Referer': 'https://my-ai-circle.vercel.app', // –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL
        'X-Title': 'Heso AI by Daniil Kamaev',
      },
      body: JSON.stringify({
        model: 'openai/gpt-4o-mini', // –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        messages: openRouterMessages,
      }),
    });

    const data = await response.json();

    if (!response.ok) {
      console.error('OpenRouter error:', data);
      return res.status(500).json({ error: data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Heso' });
    }

    return res.status(200).json(data);
  } catch (error) {
    console.error('Fetch error:', error);
    return res.status(500).json({ error: 'Heso —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!' });
  }
}
